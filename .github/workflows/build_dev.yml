name: Deploy to Azure

on:
  push:
    branches:
      - "development"

permissions:
  id-token: write
  contents: read

jobs:
  delete-existing-resources:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Azure CLI
      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Step 3: List and Delete Web Apps
      - name: List and Delete Web Apps
        run: |
          WEB_APP_IDS=$(az resource list --resource-group dccomics --resource-type Microsoft.Web/sites --query "[?tags.deployment=='development'].id" -o tsv)
          for id in $WEB_APP_IDS; do
            az resource delete --ids "$id" --no-wait
          done

      # Step 4: List and Delete Web App Plans
      - name: List and Delete Web App Plans
        run: |
          WEB_APP_PLAN_IDS=$(az resource list --resource-group dccomics --resource-type Microsoft.Web/serverfarms --query "[?tags.deployment=='development'].id" -o tsv)
          for id in $WEB_APP_PLAN_IDS; do
            az resource delete --ids "$id" --no-wait 
          done

      # Step 5: List and Delete Cosmos DB Accounts
      - name: List and Delete Cosmos DB Accounts
        run: |
          COSMOS_DB_IDS=$(az resource list --resource-group dccomics --resource-type Microsoft.DocumentDB/databaseAccounts --query "[?tags.deployment=='development'].id" -o tsv)
          for id in $COSMOS_DB_IDS; do
            az resource delete --ids "$id" --no-wait 
          done

  deploy-bicep-and-app:
    needs: delete-existing-resources
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Azure CLI
      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Step 3: Deploy Bicep Template
      - name: Deploy Bicep Template
        id: deploy-bicep-template
        run: |
          echo "Deploying Bicep template..."
          az deployment group create --resource-group dccomics --template-file ./deploy/dev.bicep --parameters location=eastus

      # Step 4: Get Web App Name from Bicep Template Output
      - name: Get Web App Name
        id: get-web-app-name
        run: |
          WEB_APP_NAME=$(az deployment group show --resource-group dccomics --name ${{ steps.deploy-bicep-template.outputs.deploy-bicep-template }} --query "properties.outputs.appServiceName.value" -o tsv)
          echo "::set-output name=web-app-name::$WEB_APP_NAME"

      # Step 5: Get Cosmos DB Connection String
      - name: Get Cosmos DB Connection String
        id: get-cosmosdb-connection-string
        run: |
          COSMOSDB_CONNECTION_STRING=$(az deployment group show --resource-group dccomics --name ${{ steps.deploy-bicep-template.outputs.deploy-bicep-template }} --query "properties.outputs.cosmosDbConnectionString.value" -o tsv)
          echo "::set-output name=COSMOSDB_CONNECTION_STRING::$COSMOSDB_CONNECTION_STRING"

      # Step 6: Configure Web App Ports
      - name: Configure Web App Ports
        env:
          WEB_APP_NAME: ${{ needs.get-web-app-name.outputs.web-app-name }}
        run: |
          az webapp config appsettings set -g dccomics -n $WEB_APP_NAME --settings WEBSITES_PORT=5000

      # Step 7: Set Cosmos DB Connection String as Environment Variable
      - name: Set Cosmos DB Connection String
        env:
          WEB_APP_NAME: ${{ needs.get-web-app-name.outputs.web-app-name }}
          COSMOSDB_CONNECTION_STRING: ${{ steps.get-cosmosdb-connection-string.outputs.COSMOSDB_CONNECTION_STRING }}
        run: |
          az webapp config appsettings set -g dccomics -n $WEB_APP_NAME --settings MONGODB_URI="$COSMOSDB_CONNECTION_STRING"

      # Step 8: Deploy app.py to Azure Web App
      - name: Deploy app.py to Azure Web App
        env:
          WEB_APP_NAME: ${{ needs.get-web-app-name.outputs.web-app-name }}
        run: |
          az webapp deployment source config-zip -g dccomics -n $WEB_APP_NAME --src ./app.py

      # Step 9: Print Resources Information
      - name: Print Resources Information
        run: |
          echo "Web App Name: ${{ needs.get-web-app-name.outputs.web-app-name }}"
          echo "App Service Plan Name: ${{ steps.get-app-service-plan-name.outputs.app-service-plan-name }}"
          echo "Cosmos DB Account Name: ${{ steps.get-cosmosdb-account-name.outputs.cosmosdb-account-name }}"