name: Deploy to Azure

on:
  push:
    branches:
      - "development*" # Push events to development branch trigger the workflow

permissions:
  id-token: write
  contents: read

jobs:
  delete-previous-resources:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: List Microsoft.Web resources with deployment tag
        id: list-web-resources
        run: |
          RESOURCE_GROUP="dccomics"
          WEB_RESOURCES=$(az resource list --resource-group $RESOURCE_GROUP --resource-type Microsoft.Web/sites --query "[?tags.deployment=='development'].id" -o tsv)
          echo "::set-output name=web-resources::$WEB_RESOURCES"

      - name: Delete Microsoft.Web resources with deployment tag
        run: |
          RESOURCE_GROUP="dccomics"
          WEB_RESOURCES="${{ steps.list-web-resources.outputs.web-resources }}"
          for res in $WEB_RESOURCES; do
            az resource delete --ids "$res" --no-wait
          done

      - name: List other tagged resources with deployment
        id: list-other-resources
        run: |
          RESOURCE_GROUP="dccomics"
          OTHER_RESOURCES=$(az resource list --resource-group $RESOURCE_GROUP --query "[?tags.deployment=='development' && type!='Microsoft.Web/sites'].id" -o tsv)
          echo "::set-output name=other-resources::$OTHER_RESOURCES"

      - name: Delete other tagged resources with deployment
        run: |
          RESOURCE_GROUP="dccomics"
          OTHER_RESOURCES="${{ steps.list-other-resources.outputs.other-resources }}"
          for res in $OTHER_RESOURCES; do
            az resource delete --ids "$res" --no-wait
          done

  deploy-bicep-and-app:
    needs: delete-previous-resources
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set deployment name
        id: set-deployment-name
        run: |
          DEPLOYMENT_NAME="dev-$(date +'%Y%m%d%H%M%S')"
          echo "::set-output name=deployment-name::$DEPLOYMENT_NAME"

      - name: Deploy Bicep Template
        id: deploy-bicep-template
        run: |
          DEPLOYMENT_NAME=$(echo "${{ steps.set-deployment-name.outputs.deployment-name }}")
          az deployment group create --resource-group dccomics --name $DEPLOYMENT_NAME --template-file ./deploy/dev.bicep --parameters location=eastus

      - name: Get Output from Bicep Template
        id: get-bicep-output
        run: |
          DEPLOYMENT_NAME=$(echo "${{ steps.set-deployment-name.outputs.deployment-name }}")
          APP_SERVICE_NAME=$(az deployment group show --resource-group dccomics --name $DEPLOYMENT_NAME --query "properties.outputs.appServiceName.value" -o tsv)
          APP_SERVICE_PLAN_NAME=$(az deployment group show --resource-group dccomics --name $DEPLOYMENT_NAME --query "properties.outputs.appServicePlanName.value" -o tsv)
          COSMOS_DB_ACCOUNT_NAME=$(az deployment group show --resource-group dccomics --name $DEPLOYMENT_NAME --query "properties.outputs.cosmosDbAccountName.value" -o tsv)
          echo "::set-output name=app-service-name::$APP_SERVICE_NAME"
          echo "::set-output name=app-service-plan-name::$APP_SERVICE_PLAN_NAME"
          echo "::set-output name=cosmos-db-account-name::$COSMOS_DB_ACCOUNT_NAME"

      - name: Echo Output
        run: |
          echo "App Service Name: ${{ steps.get-bicep-output.outputs.app-service-name }}"
          echo "App Service Plan Name: ${{ steps.get-bicep-output.outputs.app-service-plan-name }}"
          echo "Cosmos DB Account Name: ${{ steps.get-bicep-output.outputs.cosmos-db-account-name }}"