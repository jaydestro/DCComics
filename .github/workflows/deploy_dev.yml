name: Deploy to Azure

on:
  push:
    branches:
      - development

permissions:
  id-token: write
  contents: read

jobs:
  check-existing-resources:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - uses: azure/login@v1
      name: Set up Azure CLI
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Check Existing Resources
      id: check-resources
      run: |
        # Use Azure CLI to query resources with the "development" tag
        RESOURCE_COUNT=$(az resource list --resource-group dccomics --tag deployment=development --query "length([])")
        echo "::set-output name=RESOURCE_COUNT::$RESOURCE_COUNT"
        echo "Resource count: $RESOURCE_COUNT"

        if [ $RESOURCE_COUNT -gt 0 ]; then
          # Get the webAppName from the tagged Web App resource
          WEBAPP_NAME=$(az resource list --resource-group dccomics --tag deployment=development --query "[?type=='Microsoft.Web/sites'].name | [0]" -o tsv)
          echo "::set-output name=WEBAPP_NAME::$WEBAPP_NAME"
        fi

  deploy-bicep-template:
    needs: check-existing-resources
    runs-on: ubuntu-latest
    if: ${{ needs.check-existing-resources.outputs.RESOURCE_COUNT == '0' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - uses: azure/login@v1
      name: Set up Azure CLI
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Debug RESOURCE_COUNT
      run: echo "RESOURCE_COUNT=${{ needs.check-existing-resources.outputs.RESOURCE_COUNT }}"

    - name: Run Bicep Template Deployment
      run: |
        echo "Deploying Bicep template..."
        az deployment group create --resource-group dccomics --template-file ./deploy/dev.bicep --parameters location=eastus

  set-cosmosdb-connection-string:
    needs: deploy-bicep-template
    runs-on: ubuntu-latest
    if: ${{ needs.deploy-bicep-template.result == 'success' }}
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Cosmos DB Connection String
      run: |
        # Get Cosmos DB connection string
        COSMOSDB_CONNECTION_STRING=$(az cosmosdb keys list --resource-group dccomics --name dccomics-db --query "connectionStrings[0].connectionString" -o tsv)
        echo "::set-output name=COSMOSDB_CONNECTION_STRING::$COSMOSDB_CONNECTION_STRING"

  deploy-app-py:
    needs: set-cosmosdb-connection-string
    runs-on: ubuntu-latest
    if: ${{ needs.deploy-bicep-template.result == 'success' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Deploy app.py to Azure Web App
      if: ${{ needs.check-existing-resources.outputs.RESOURCE_COUNT != '0' }}
      run: |
        # Deploy app.py to the tagged Web App
        az webapp deployment source config-zip -g dccomics -n ${{ needs.check-existing-resources.outputs.WEBAPP_NAME }} --src ./app.py

    - name: Set Cosmos DB Connection String as Environment Variable
      run: |
        # Set the Cosmos DB connection string as a Web App environment variable
        az webapp config appsettings set -g dccomics -n ${{ needs.check-existing-resources.outputs.WEBAPP_NAME }} --settings "COSMOSDB_CONNECTION_STRING=${{ needs.set-cosmosdb-connection-string.outputs.COSMOSDB_CONNECTION_STRING }}"
