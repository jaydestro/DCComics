name: Deploy to Azure

on:
  push:
    branches:
      - "development*" # Push events to development branch trigger the workflow

permissions:
  id-token: write
  contents: read

jobs:
  delete-existing-resources:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - uses: azure/login@v1
      name: Set up Azure CLI
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Resource IDs and Names to Delete
      id: get-resources-to-delete
      run: |
        # Get the IDs and names of resources tagged with "deployment=development"
        RESOURCE_IDS=$(az resource list --resource-group dccomics --query "[?tags.deployment=='development'].id" -o tsv)
        RESOURCE_NAMES=$(az resource list --resource-group dccomics --query "[?tags.deployment=='development'].name" -o tsv)
        echo "::set-output name=RESOURCE_IDS::$RESOURCE_IDS"
        echo "::set-output name=RESOURCE_NAMES::$RESOURCE_NAMES"
  
    - name: Delete Resources
      run: |
        # Loop through the list of resource IDs and delete them
        for id in ${{ steps.get-resources-to-delete.outputs.RESOURCE_IDS }}; do
          az resource delete --ids "$id" --no-wait
        done

  deploy-bicep-template:
    needs: delete-existing-resources
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - uses: azure/login@v1
      name: Set up Azure CLI
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Run Bicep Template Deployment
      run: |
        echo "Deploying Bicep template..."
        az deployment group create --resource-group dccomics --template-file ./deploy/dev.bicep --parameters location=eastus

  get-web-app-name:
    needs: deploy-bicep-template
    runs-on: ubuntu-latest
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Web App Name
      id: get-web-app-name
      run: |
        # Get all Web App resources in the resource group
        WEB_APP_LIST=$(az resource list --resource-group dccomics --resource-type Microsoft.Web/sites --query "[?type=='Microsoft.Web/sites'].name" -o tsv)

        # Loop through the list of Web Apps and find the one with the specified tag
        while IFS= read -r webapp; do
          TAGS=$(az resource show --ids "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/dccomics/providers/Microsoft.Web/sites/$webapp" --query 'tags' -o json)
          if [[ $(echo $TAGS | jq -r '.deployment') == 'development' ]]; then
            echo "::set-output name=web-app-name::$webapp"
            break
          fi
        done <<< "$WEB_APP_LIST"

  get-cosmosdb-connection-string:
    needs: deploy-bicep-template
    runs-on: ubuntu-latest
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Cosmos DB Connection String
      id: get-cosmosdb-connection-string
      run: |
        # Get the name of the Cosmos DB database tagged with "deployment=development"
        COSMOS_DB_NAME=$(az resource list --resource-group dccomics --resource-type Microsoft.DocumentDB/databaseAccounts --query "[?tags.deployment=='development'].name | [0]" -o tsv)

        # Get Cosmos DB connection string
        COSMOSDB_CONNECTION_STRING=$(az cosmosdb keys list --resource-group dccomics --name $COSMOS_DB_NAME --query "connectionStrings[0].connectionString" -o tsv)
        echo "::set-output name=COSMOSDB_CONNECTION_STRING::$COSMOSDB_CONNECTION_STRING"

  deploy-app-py:
    needs: get-cosmosdb-connection-string
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Deploy app.py to Azure Web App
      run: |
        # Deploy app.py to the Azure Web App
        # The web app name is inherited from the Bicep deployment output
        az webapp deployment source config-zip -g dccomics -n ${{ needs.get-web-app-name.outputs.web-app-name }} --src ./app.py

    - name: Set Cosmos DB Connection String as Environment Variable
      run: |
        # Set the Cosmos DB connection string as a Web App environment variable
        az webapp config appsettings set -g dccomics -n ${{ needs.get-web-app-name.outputs.web-app-name }} --settings "COSMOSDB_CONNECTION_STRING=${{ needs.get-cosmosdb-connection-string.outputs.COSMOSDB_CONNECTION_STRING }}"