name: Deploy to Azure

on:
  push:
    branches:
      - "development*" # Push events to development branch trigger the workflow

permissions:
  id-token: write
  contents: read

jobs:
  delete-previous-deployments:
    runs-on: ubuntu-latest
    outputs:
      deployment-started: ${{ steps.delete-deployments.outputs.deployment-started }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: List deployments
        id: list-deployments
        run: |
          RESOURCE_GROUP="dccomics"
          DEPLOYMENTS=$(az deployment group list -g $RESOURCE_GROUP --query "[].name" -o tsv)
          echo "::set-output name=deployments::$DEPLOYMENTS"

      - name: Wait for previous deployment to complete
        run: |
          RESOURCE_GROUP="dccomics"
          DEPLOYMENTS="${{ steps.list-deployments.outputs.deployments }}"
          for dep in $DEPLOYMENTS; do
            az deployment group wait --resource-group $RESOURCE_GROUP --name $dep --updated --custom "provisioningState!='Running'" --interval 30 --timeout 1800
          done

      - name: Delete previous deployments
        id: delete-deployments
        run: |
          RESOURCE_GROUP="dccomics"
          DEPLOYMENTS="${{ steps.list-deployments.outputs.deployments }}"
          for dep in $DEPLOYMENTS; do
            az deployment group delete -g $RESOURCE_GROUP -n $dep --no-wait
          done

          echo "::set-output name=deployment-started::true"

  deploy-bicep-and-app:
    needs: delete-previous-deployments
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up deployment name
        id: set-deployment-name
        run: |
          echo "##[set-output name=deployment-name;]dev-$(date +'%Y%m%d%H%M%S')"

      - name: Deploy Bicep Template
        run: |
          echo "Deploying Bicep template..."
          DEPLOYMENT_NAME=$(echo "${{ steps.set-deployment-name.outputs.deployment-name }}")
          az deployment group create --resource-group dccomics --name $DEPLOYMENT_NAME --template-file ./deploy/dev.bicep --parameters location=eastus --no-wait

      - name: Get Web App Name
        id: get-web-app-name
        run: |
          DEPLOYMENT_NAME=$(echo "${{ steps.set-deployment-name.outputs.deployment-name }}")
          WEB_APP_NAME=$(az deployment group show --resource-group dccomics --name $DEPLOYMENT_NAME --query "properties.outputs.appServiceName.value" -o tsv)
          echo "::set-output name=web-app-name::$WEB_APP_NAME"

      - name: Get Cosmos DB Connection String
        id: get-cosmosdb-connection-string
        run: |
          DEPLOYMENT_NAME=$(echo "${{ steps.set-deployment-name.outputs.deployment-name }}")
          COSMOS_DB_ACCOUNT_NAME=$(az deployment group show --resource-group dccomics --name $DEPLOYMENT_NAME --query "properties.outputs.cosmosDbAccountName.value" -o tsv)
          COSMOSDB_CONNECTION_STRING=$(az cosmosdb keys list --resource-group dccomics --name $COSMOS_DB_ACCOUNT_NAME --query "connectionStrings[0].connectionString" -o tsv)
          echo "::set-output name=COSMOSDB_CONNECTION_STRING::$COSMOSDB_CONNECTION_STRING"

      - name: Deploy app.py to Azure Web App
        env:
          WEB_APP_NAME: ${{ needs.get-web-app-name.outputs.web-app-name }}
        run: |
          az webapp deployment source config-zip -g dccomics -n $WEB_APP_NAME --src ./app.py

      - name: Set Cosmos DB Connection String as Environment Variable
        run: |
          az webapp config appsettings set -g dccomics -n $WEB_APP_NAME --settings "COSMOSDB_CONNECTION_STRING=${{ needs.get-cosmosdb-connection-string.outputs.COSMOSDB_CONNECTION_STRING }}"