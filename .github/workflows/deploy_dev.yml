name: Deploy to Azure

on:
  push:
    branches:
      - "development*" # Push events to development branch trigger the workflow

permissions:
  id-token: write
  contents: read

jobs:
  delete-existing-resources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Resource IDs to Delete
        id: get-resources-to-delete
        run: |
          # Get the IDs of resources tagged with "deployment=development"
          RESOURCE_IDS=$(az resource list --resource-group dccomics --query "[?tags.deployment=='development'].id" -o tsv)
          echo "::set-output name=RESOURCE_IDS::$RESOURCE_IDS"

      - name: Delete Web Apps
        if: steps.get-resources-to-delete.outputs.RESOURCE_IDS != ''
        run: |
          # Loop through the list of resource IDs and delete Web Apps
          for id in ${{ steps.get-resources-to-delete.outputs.RESOURCE_IDS }}; do
            az webapp delete --verbose --ids "$id" --yes
          done

      - name: Wait for Web App Deletion
        if: steps.get-resources-to-delete.outputs.RESOURCE_IDS != ''
        run: |
          # Loop to check if web apps have been deleted successfully
          for id in ${{ steps.get-resources-to-delete.outputs.RESOURCE_IDS }}; do
            while az resource show --ids "$id" &>/dev/null; do
              echo "Waiting for web app deletion..."
              sleep 10
            done
            echo "Web app with ID $id has been deleted."
          done

      - name: Delete Resources
        if: steps.get-resources-to-delete.outputs.RESOURCE_IDS != ''
        run: |
          # Loop through the list of resource IDs and delete remaining resources
          for id in ${{ steps.get-resources-to-delete.outputs.RESOURCE_IDS }}; do
            az resource delete --verbose --ids "$id" --no-wait -g dccomics
          done

  deploy-bicep-template:
    needs: delete-existing-resources
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run Bicep Template Deployment
        run: |
          echo "Deploying Bicep template..."
          az deployment group create --resource-group dccomics --template-file ./deploy/dev.bicep --parameters location=eastus

  get-cosmosdb-connection-string:
    needs: deploy-bicep-template
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Cosmos DB Connection String
        id: get-cosmosdb-connection-string
        run: |
          # Get the name of the Cosmos DB database tagged with "deployment=development"
          COSMOS_DB_NAME=$(az resource list --resource-group dccomics --resource-type Microsoft.DocumentDB/databaseAccounts --query "[?tags.deployment=='development'].name | [0]" -o tsv)

          # Get Cosmos DB connection string
          COSMOSDB_CONNECTION_STRING=$(az cosmosdb keys list --resource-group dccomics --name $COSMOS_DB_NAME --query "connectionStrings[0].connectionString" -o tsv)
          echo "::set-output name=COSMOSDB_CONNECTION_STRING::$COSMOSDB_CONNECTION_STRING}"

  deploy-app-py:
    needs: [deploy-bicep-template, get-cosmosdb-connection-string]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy app.py to Azure Web App
        env:
          WEB_APP_NAME: ${{ needs.deploy-bicep-template.outputs.appServiceName }}
        run: |
          # Deploy app.py to the Azure Web App
          az webapp deployment source config-zip -g dccomics -n $WEB_APP_NAME --src ./app.py

      - name: Set Cosmos DB Connection String as Environment Variable
        run: |
          # Set the Cosmos DB connection string as a Web App environment variable
          az webapp config appsettings set -g dccomics -n $WEB_APP_NAME --settings "COSMOSDB_CONNECTION_STRING"