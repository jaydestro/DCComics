name: Deploy to Azure

on:
  push:
    branches:
      - "development*" # Push events to development branch trigger the workflow

permissions:
  id-token: write
  contents: read

jobs:
  delete-existing-resources:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Azure CLI
      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Step 3: Delete Web Apps
      - name: Delete Web Apps
        run: |
          # Get the IDs of Web Apps tagged with "deployment=development"
          WEB_APP_IDS=$(az resource list --resource-group dccomics --resource-type Microsoft.Web/sites --query "[?tags.deployment=='development'].id" -o tsv)
          
          # Loop through the list of Web App IDs and delete Web Apps
          for id in $WEB_APP_IDS; do
            az resource delete --ids "$id" --no-wait
          done

      # Step 4: Delete Web App Plans
      - name: Delete Web App Plans
        run: |
          # Get the IDs of Web App Plans tagged with "deployment=development"
          WEB_APP_PLAN_IDS=$(az resource list --resource-group dccomics --resource-type Microsoft.Web/serverfarms --query "[?tags.deployment=='development'].id" -o tsv)
          
          # Loop through the list of Web App Plan IDs and delete Web App Plans
          for id in $WEB_APP_PLAN_IDS; do
            az resource delete --ids "$id" --no-wait
          done

      # Step 5: Delete Cosmos DB Accounts (without waiting for deletion)
      - name: Delete Cosmos DB Accounts
        run: |
          # Get the IDs of Cosmos DB Accounts tagged with "deployment=development"
          COSMOS_DB_IDS=$(az resource list --resource-group dccomics --resource-type Microsoft.DocumentDB/databaseAccounts --query "[?tags.deployment=='development'].id" -o tsv)
          
          # Loop through the list of Cosmos DB Account IDs and delete Cosmos DB Accounts without waiting
          for id in $COSMOS_DB_IDS; do
            # Check the status of the Cosmos DB before deleting
            DB_STATUS=$(az cosmosdb show --ids "$id" --query "properties.provisioningState" -o tsv)
            if [ "$DB_STATUS" != "Deleting" ]; then
              az resource delete --ids "$id" --no-wait &
            fi
          done

        # Ensure the step doesn't wait for background processes to finish
        background: true

  deploy-bicep-and-app:
    needs: delete-existing-resources
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Azure CLI
      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Step 3: Deploy Bicep Template
      - name: Deploy Bicep Template
        run: |
          echo "Deploying Bicep template..."
          az deployment group create --resource-group dccomics --template-file ./deploy/dev.bicep --parameters location=eastus

      # Step 4: Get Web App Name from Bicep Template Output
      - name: Get Web App Name
        run: |
          # Add your logic to get the Web App Name here

      # Step 5: Get Cosmos DB Connection String
      - name: Get Cosmos DB Connection String
        run: |
          # Add your logic to get the Cosmos DB Connection String here

      # Step 6: Deploy app.py to Azure Web App
      - name: Deploy app.py to Azure Web App
        run: |
          # Add your logic to deploy app.py to the Azure Web App here

      # Step 7: Set Cosmos DB Connection String as Environment Variable
      - name: Set Cosmos DB Connection String as Environment Variable
        run: |
          # Add your logic to set the Cosmos DB Connection String as an environment variable here