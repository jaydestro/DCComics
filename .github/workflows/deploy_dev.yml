name: Deploy to Azure

on:
  push:
    branches:
      - "development"

permissions:
  id-token: write
  contents: read

jobs:
  delete-existing-resources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: List Web App IDs
        id: list-web-app-ids
        run: |
          WEB_APP_IDS=$(az resource list --resource-group dccomics --resource-type Microsoft.Web/sites --query "[?tags.deployment=='development'].id" -o tsv)
          echo "::set-output name=web-app-ids::$WEB_APP_IDS"
          
      - name: List Web App Plan IDs
        id: list-web-app-plan-ids
        run: |
          WEB_APP_PLAN_IDS=$(az resource list --resource-group dccomics --resource-type Microsoft.Web/serverfarms --query "[?tags.deployment=='development'].id" -o tsv)
          echo "::set-output name=web-app-plan-ids::$WEB_APP_PLAN_IDS"
      
      - name: List Cosmos DB IDs
        id: list-cosmos-db-ids
        run: |
          COSMOS_DB_IDS=$(az resource list --resource-group dccomics --resource-type Microsoft.DocumentDB/databaseAccounts --query "[?tags.deployment=='development'].id" -o tsv)
          echo "::set-output name=cosmos-db-ids::$COSMOS_DB_IDS"
          
      # Add more steps for listing other types of resources
      
      - name: Delete Web Apps
        run: |
          for id in ${{ steps.list-web-app-ids.outputs.web-app-ids }}; do
            az resource delete --ids "$id" --no-wait
          done
      
      - name: Delete Web App Plans
        run: |
          for id in ${{ steps.list-web-app-plan-ids.outputs.web-app-plan-ids }}; do
            az resource delete --ids "$id" --no-wait
          done
      
      - name: Delete Cosmos DB Accounts
        run: |
          for id in ${{ steps.list-cosmos-db-ids.outputs.cosmos-db-ids }}; do
            az resource delete --ids "$id" --no-wait
          done
      
      # Add more steps for deleting other types of resources
      
  deploy-bicep-and-app:
    needs: delete-existing-resources
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: azure/login@v1
        name: Set up Azure CLI
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Bicep Template
        run: |
          echo "Deploying Bicep template..."
          az deployment group create --resource-group dccomics --template-file ./deploy/dev.bicep --parameters location=eastus

      # Add more steps as needed for deploying the app and setting environment variables
      
      - name: Get Bicep Outputs
        id: deploy-bicep-template
        run: |
          APP_SERVICE_NAME=$(az deployment group show --resource-group dccomics --name dev --query "properties.outputs.appServiceName.value" -o tsv)
          APP_SERVICE_PLAN_NAME=$(az deployment group show --resource-group dccomics --name dev --query "properties.outputs.appServicePlanName.value" -o tsv)
          COSMOS_DB_ACCOUNT_NAME=$(az deployment group show --resource-group dccomics --name dev --query "properties.outputs.cosmosDbAccountName.value" -o tsv)
          echo "::set-output name=appServiceName::$APP_SERVICE_NAME"
          echo "::set-output name=appServicePlanName::$APP_SERVICE_PLAN_NAME"
          echo "::set-output name=cosmosDbAccountName::$COSMOS_DB_ACCOUNT_NAME"
      
      - name: Print Outputs
        run: |
          echo "App Service Name: ${{ steps.deploy-bicep-template.outputs.appServiceName }}"
          echo "App Service Plan Name: ${{ steps.deploy-bicep-template.outputs.appServicePlanName }}"
          echo "Cosmos DB Account Name: ${{ steps.deploy-bicep-template.outputs.cosmosDbAccountName }}"